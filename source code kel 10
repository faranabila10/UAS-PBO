source code UAS praktek PBO (kel 10) "payroll system using inheritance and polymorohism"
nama anggota kel 10 : hawa nur rahma, farah nabilah ardana, safira salsabila tasya, nuriya kumalasari


testdriver.java


import java.util.*;

public class testdriver {
   static double parttimetotal=0;
   static double totalsalary=0;
   static Employee employee[]=new Employee[9];
   /**main method which throws CloneNotSupportedException
   * @param args
   * @throws CloneNotSupportedException
   */
   public static void main(String [] args)throws CloneNotSupportedException {
       employee[0]=new Staff("Allen","Paita","123","M",new GregorianCalendar(2018, 2,23),50);
       employee[1]=new Staff("Zapata","Steven","456","F",new GregorianCalendar(2004, 7, 12),35);
       employee[2]=new Staff("Rios","Enrique","789","M",new GregorianCalendar(2014, 6, 2),40);
       employee[3]=new Faculty("Johnson", "Anne", "243", "F", new GregorianCalendar(2018, 4, 27), Faculty.Level.FU,"Ph.D","Engineering",3);
       employee[4]=new Faculty("Bouris","Willian","791","F",new GregorianCalendar(2015, 3, 14),Faculty.Level.AO,"Ph.D","English",1);
       employee[5]=new Faculty("Andrade","Christopher","623","F",new GregorianCalendar(1998, 5, 22),Faculty.Level.AS,"MS","Physical Education",0);
       employee[6]=new Partime("Guzman", "Augusto", "455", "F", new GregorianCalendar(1987, 8, 10),35, 30);
       employee[7]=new Partime("Depirro", "Martin", "678", "F", new GregorianCalendar(1997, 9, 15), 30, 15);
       employee[8]=new Partime("Aldaco", "Marque", "945", "M", new GregorianCalendar(2012, 11, 24), 20, 35);
       System.out.println("Staff:");
       for(int i=0;i<3;i++) {
           System.out.println(employee[i].toString());
       }
       System.out.println(" Faculty:");
       for(int i=3;i<6;i++) {
           System.out.println(employee[i].toString());
       }  
       System.out.println(" Part-Time:");
       for(int i=6;i<9;i++) {
           System.out.println(employee[i].toString());
       }
       parttimetotal=totalPartTimeSal();
       totalsalary=totalsal();
       System.out.println("---------------------------------------------------------");
       System.out.println(" The total monthly salary for all the Part-Time staff: $"+parttimetotal);
       System.out.println("---------------------------------------------------------");
       System.out.println(" The total monthly salary for all employees: $"+totalsalary);
       System.out.println("---------------------------------------------------------");
       System.out.println(" Sorting by ID number.... ");
       Arrays.sort(employee,new Comparer());
       int j=0;
       while(j<9) {
           Employee obj=(Employee)employee[j++];
           System.out.println(obj.toString());
       }
       System.out.println("---------------------------------------------------------");
       System.out.println(" Sorting by Last Name.... ");
       Arrays.sort(employee);
       int i=0;
       while(i<9) {
           Employee obj=(Employee)employee[i++];
           System.out.println(obj.toString());
       }
       System.out.println("---------------------------------------------------------");
       System.out.println(" f. Duplicate a faculty object using clone.");
       Faculty fac=new Faculty("Bouris","Willian","791","F",new GregorianCalendar(2015, 3, 14),Faculty.Level.AO,"Ph.D","English",1);
       Faculty fac1=(Faculty)fac.clone();
       System.out.println(fac.toString()+" ###Cloned Information### "+fac1.toString()+" Verifing Duplication... "+" ###Original Information### "+fac.toString()+" ###Cloned Information###");
       fac1.setfn("Ashish");
       fac1.setln("Gare");
       fac1.sethireDate(new GregorianCalendar(1998,4,20));
       fac1.setID("420");
       fac1.setLevel(Faculty.Level.FU);
       System.out.println(fac1.toString());
       }
   /**It returns the total part time salary
   * @return total part time salary
   */
   public static double totalPartTimeSal() {
       for(int i=6;i<9;i++) {
           parttimetotal+=employee[i].monthlyEarnings();
       }
       return parttimetotal;
   }
   /**It returns total salary of the employees
   * @return total employees salary
   */
   public static double totalsal() {
       for(int i=0;i<9;i++) {
           totalsalary+=employee[i].monthlyEarnings();
       }
       return totalsalary;
   }
}

Employee.java

import java.util.*;

public abstract class Employee implements EmployeeInfo, Comparable<Employee>{
   private String lastName;
   private String firstName;
   private String IDnum;
   private String sex;
   private GregorianCalendar hireDate;
   /**Constructor for Employee */
   public Employee(){
       lastName=" ";
       firstName=" ";
       IDnum=" ";
       sex=" ";
       hireDate=new GregorianCalendar(1957, 5, 25);
   }
   /**Constructor which assign the values in this class with new values
   * @param ln last name which needs to be replaced with
   * @param fn last name which needs to be replaced with
   * @param ID new employee ID
   * @param sex new string sex which needs to be replaced with the old String
   * @param hireDate hireDate which needs to be replaced with
   */
   public Employee(String ln, String fn, String ID, String sex, GregorianCalendar hireDate) {
       lastName=ln;
       firstName=fn;
       IDnum=ID;
       this.sex=sex;
       this.hireDate=hireDate;
   }
   /**gets the last name
   * @return last name
   */
   public String getln() {
       return lastName;
   }
   /**gets first name
   * @return first name
   */
   public String getfn() {
       return firstName;
   }
   /**returns Employee ID
   * @return Employee ID
   */
   public String ID() {
       return IDnum;
   }
   /**returns sex
   * @return sex
   */
   public String sex() {
       return sex;
   }
   /**returns hire date
   * @return hire date
   */
   public Calendar gethireDate(){
       return hireDate;
   }
   /**sets Last name with a new value
   * @param ln Last name
   */
   public void setln(String ln) {
       lastName=ln;
   }
   /**sets first name with a new value
   * @param fn First name
   */
   public void setfn(String fn) {
       firstName=fn;
   }
   /**sets Id with a new value
   * @param ID Employee ID
   */
   public void setID(String ID) {
       IDnum=ID;
   }
   /** replaces sex with a new value
   * @param sex
   */
   public void setSex(String sex) {
       this.sex=sex;
   }
   /**replaces hire date with a new value
   * @param date new hire date
   */
   public void sethireDate(GregorianCalendar date) {
       hireDate=date;
   }
   /** it returns string of the different employee details */
   public String toString() {
       return " ID Employee number: "+IDnum +" Employee Name: "+firstName+" "+lastName+" Hire date: "+hireDate.get(Calendar.MONTH)+"/"+hireDate.get(Calendar.DAY_OF_MONTH)+"/"+hireDate.get(Calendar.YEAR);
   }
   /**Abstract method which calculates and returns employee monthly earnings
   * @return employee monthly earning
   */
   public abstract double monthlyEarnings();
   /*method used to compare two objects by last name/
   public int compareTo(Employee obj) {
       if(lastName.compareTo(obj.lastName)==0)
           return 0;
       else if(lastName.compareTo(obj.lastName)>0) {
           return -1;
       }
       else {
           return 1;
       }
   }
}


Staff.java


import java.util.*;

public class Staff extends Employee {
   private int HourlyRate;
   /*Constructor Staff which initiates the values/
   public Staff() {
       super();
       HourlyRate=0;
   }
   /**Overloaded constructor method
   * @param ln last name  
   * @param fn first name
   * @param ID Employee ID
   * @param sex Sex
   * @param hireDate Hired Date
   * @param hourlyRate Hourly rate for the work
   */
   public Staff(String ln, String fn, String ID, String sex, GregorianCalendar hireDate, int hourlyRate) {
       super(ln,fn,ID,sex,hireDate);
       HourlyRate=hourlyRate;
   }
   /* methods which returns monthly earning of the staff/
   public double monthlyEarnings() {
       return HourlyRate*STAFF_MONTHLY_HOURS_WORKED;
   }
   /** it returns hourly rate
   * @return hourly rate
   */
   public int hourlyrate() {
       return HourlyRate;
   }
   /** it replaces the hourly rate with new value
   * @param hourly rate
   */
   public void setHourlyRate(int hr) {
       HourlyRate=hr;
   }
   /**it returns string of the different Staff details */
   public String toString() {
       if(this instanceof Partime) {
           return super.toString();
       }
       else
           return super.toString()+" Full Time Monthly Salary: $"+monthlyEarnings();
   }
  
}


EmployeeInfo.java


public interface EmployeeInfo {
   double FACULTY_MONTHLY_SALARY=5000.00;
   int STAFF_MONTHLY_HOURS_WORKED=150;
}

Parttime.java


import java.util.*;

public class Partime extends Staff{
   private int hoursworked;
   /*Constructor part time which initiates the values/
   public Partime() {
       super();
       hoursworked=0;
   }
   /**Overloaded constructor method
   * @param ln last name
   * @param fn first name
   * @param ID Employee ID
   * @param sex Sex
   * @param hireDate Hire date
   * @param hourlyRate Hourly rate
   * @param hoursworked Number of hours worked
   */
   public Partime(String ln, String fn, String ID, String sex, GregorianCalendar hireDate, int hourlyRate, int hoursworked) {
       super(ln,fn,ID,sex,hireDate,hourlyRate);
       this.hoursworked=hoursworked;
   }
   /**it returns hours worked
   * @return hours worked
   */
   public int getHoursWorked() {
       return hoursworked;
   }
   /** it sets the hours worked with new value
   * @param hoursWorked hours worked
   */
   public void setHoursWorked(int hoursWorked) {
       this.hoursworked=hoursWorked;
   }
   /* it returns monthly earnings of the part time employees/
   public double monthlyEarnings() {
       return super.hourlyrate()*hoursworked*4;
   }
   /**it returns string of the different Part time employee details */
   public String toString() {
       return super.toString()+" Hours worked per month: "+hoursworked*4+" Monthly Salary: $"+monthlyEarnings();
   }
}


Faculty.java


import java.util.*;
import java.lang.*;

public class Faculty extends Employee implements Cloneable{
   Education en;
   /**Enum to initiate Level */
   public enum Level {
       AS,AO,FU
   }
   Level l;
   /**Constructor which initiates the values */
   public Faculty() {
       super();
       en=new Education();
       l=null;
   }
   /** Overloaded constructor method
   * @param ln last name  
   * @param fn first name
   * @param ID Employee ID
   * @param sex Sex
   * @param hireDate Hired Date
   * @param l level
   * @param Degree Degree
   * @param Major Major
   * @param Research Number of researches
   */
   public Faculty(String ln, String fn, String ID, String sex, GregorianCalendar hireDate,Level l,String Degree, String Major, int Research) {
       super(ln,fn,ID,sex,hireDate);
       this.l=l;
       en=new Education(Degree, Major, Research);
   }
   /** it returns the level details
   * @return level details
   */
   public String leveldetails() {
       switch(l) {
       case AS:
           return "Assistant professor";
       case AO:
           return "Associate professor";
       case FU:
           return "Professor";
       default:
           return " ";
              
       }
   }
   /**it returns level
   * @param lvl level
   */
   public void setLevel(Level lvl) {
       l=lvl;
   }
   /**it returns monthly earnings */
   public double monthlyEarnings() {
       switch(l) {
       case AS:
           return FACULTY_MONTHLY_SALARY;
       case AO:
           return FACULTY_MONTHLY_SALARY*1.5;
       case FU:
           return FACULTY_MONTHLY_SALARY*2;
       default:
           return 0;
       }
   }
   /**it returns education of employee
   * @return education
   */
   public Education geted() {
       return en;
   }
   /**It replaces the Education
   * @param en Education
   */
   public void seted(Education en) {
       this.en=en;
   }
   /**it returns string of the different Faculty details */
   public String toString() {
       return super.toString()+" "+leveldetails()+" Monthly Salary: $"+monthlyEarnings();
   }
   /**it returns the clones object of faculty */
   public Object clone() throws CloneNotSupportedException{
       Faculty b=(Faculty)super.clone();
       en=(Education) en.clone();
       b.seted(en);
       return b;
   }
}


Education.java


public class Education implements Cloneable{
   private String Degree;
   private String Major;
   private int Research;
   //*Constructor education which initiates the values/
   public Education() {
       Degree="";
       Major="";
       Research=0;
   }
   /** Overloaded constructor method
   * @param Degree
   * @param Major
   * @param Research
   */
   public Education(String Degree, String Major, int Research) {
       this.Degree=Degree;
       this.Major=Major;
       this.Research=Research;
   }
   /**it returns degree
   * @return degree
   */
   public String getDegree() {
       return Degree;
   }
   /** it returns major
   * @return major
   */
   public String getMajor() {
       return Major;
   }
   /**it returns the number of researches
   * @return research
   */
   public int getResearch() {
       return Research;
   }
   /**replaces the degree with a new value
   * @param Degree
   */
   public void setDegree(String Degree) {
       this.Degree=Degree;
   }
   /**replaces the major with a new value
   * @param Major
   */
   public void setMajor(String Major) {
       this.Major=Major;
   }
   /**replaces the number of researches with a new value
   * @param Research
   */
   public void setResearch(int Research) {
       this.Research=Research;
   }
   /**it returns the clones object of faculty */
   public Object clone() throws CloneNotSupportedException{
       return super.clone();
   }
}


Comparer.java


import java.util.*;

public class Comparer implements Comparator<Employee>{
   /**It compares two employees Id of Employee objects */
   public int compare(Employee o1, Employee o2) {
       return o1.ID().compareTo(o2.ID());
   }

}
